# vim: syntax=python tabstop=4 expandtab
# coding: utf-8


"""
Using sccaller installed via bioconda, available in your path as `sccaller`.

samtools and bcftools also need to be installed.

Configuration should be provided in YAML format (e.g. config.yaml)
and loaded in the Snakefile.
"""

__author__ = "David Laehnemann (david.laehnemann@hhu.de)"
__license__ = "MIT"


def _get_ref(wildcards):
    return config["references"][wildcards.reference]


# get chromosome file if defined in config.json, set to undefined otherwise
# the file should contain the name of one chromosome per line
chrfile = config["references"].get("chromosomes","undefined")
if chrfile == "undefined":
    chrlist = ['chrM', 'chr1', 'chr2', 'chr3', 'chr4', 'chr5', 'chr6', 'chr7',
               'chr8', 'chr9', 'chr10', 'chr11', 'chr12', 'chr13', 'chr14',
               'chr15', 'chr16', 'chr17', 'chr18', 'chr19', 'chr20', 'chr21',
               'chr22', 'chrX', 'chrY']
else:
    chrlist = open(chrfile).read().splitlines()
#
# provide GATKBundle-2.8 default for dbsnp
dbsnp = gatk_bundle_path + config["GATKBundle"].setdefault("dbsnp",
                                                        "dbsnp_138.hg19.vcf")

rule mpileup_for_sccaller_per_chr:
    input:
        ref = _get_ref,
        bam = "mapping/{reference}/samples/{single_cell}.bps.sorted.bam",
        bai = "mapping/{reference}/samples/{single_cell}.bps.sorted.bam.bai"
    output:
        tmp + "/" + config["project_name"] + "/variant_calling/{reference}/sccaller/{single_cell}.{chr,chr(?:\d{1,2}|[XYM])}.sccaller.mpileup"
    log:
        "log/variant_calling/{reference}/sccaller/{single_cell}.{chr}.sccaller.mpileup.log"
    shell:
        'samtools mpileup '
        ' -C 50 ' # adjusting mapping quality as recommended by sccaller README.md
        ' -r {wildcards.chr} '
        ' -O ' # output base positions on reads
        ' -s ' # output mapping quality
        ' -f {input.ref} '
        ' -o {output} '
        ' {input.bam} '
        ' 2>&1 | tee {log} '


def _test_bulk():
    n = len(config["batches"]["bulk"])
    if n == 1 :
        return "bulk"
    elif n == 0:
        return "no bulk sample specified in config.yaml ( `config[\"batches\"][\"bulk\"]` ), needed for sccaller"
    elif n > 1:
        return "more than one bulk sample specified in config.yaml ( `config[\"batches\"][\"bulk\"]` ), exactly 1 needed for sccaller"


rule gatk_hets_only_for_sccaller:
    """
    Filter down GATK bulk calls to heterozygous candidate sites for SCcaller.
    """
    input: tmp + "/" + config["project_name"] + "/variant_calling/{reference}/{bulk}.{chr}.gatk.vcf"
    output: tmp + "/" + config["project_name"] + "/variant_calling/{reference}/sccaller/{bulk,[^.]+}.{chr,chr(?:\d{1,2}|[XYM])}.gatk_hets.vcf"
    log: "log/variant_calling/{reference}/sccaller/{bulk}.{chr}.gatk_hets.log"
    shell:
        "bcftools view --types snps --genotype het -O v {input} | "
        "bcftools annotate -x FORMAT/PGT,FORMAT/PID -O v | "
        "grep -P -v \"\t\./\.:0,0:\.:\.:\.\" >{output} " #GATK 3.6 sometimes creates corrupt FORMAT fields 
        "2>&1 | tee {log} "



rule sccaller_obtain_known_hets_per_chr:
    input:
        mp = tmp + "/" + config["project_name"] + "/variant_calling/{reference}/sccaller/{single_cell}.{chr}.sccaller.mpileup",
        hets =
            lambda wildcards: expand(tmp + "/" + config["project_name"] + "/variant_calling/{reference}/sccaller/{bulk}.{chr}.gatk_hets.vcf",
                                reference = wildcards.reference,
                                bulk = _test_bulk(),
                                chr = wildcards.chr)
    output:
        tmp + "/" + config["project_name"] + "/variant_calling/{reference}/sccaller/{single_cell,[^.]+}.{chr,chr(?:\d{1,2}|[XYM])}.sccaller.hsnp.bed"
    log:
        "log/variant_calling/{reference}/sccaller/{single_cell}.{chr}.sccaller.hsnp.log"
    conda: "envs/Benchmarking_ProSolo_py27.yaml"
    resources:
        mem_gb=3
    params: out_prefix = tmp + "/" + config["project_name"] + "/variant_calling/{reference}/{single_cell}.{chr}.sccaller"
    shell:
        'sccaller -a hsnp '
        ' -i {input.mp} '
        ' --snpin {input.hets} '
        ' --snp control '
        ' -o {params.out_prefix} '
        ' 2>&1 | tee {log} '


rule dbsnp_to_bcf:
    input:
        db = dbsnp
    output:
        bcf = tmp + "/" + config["project_name"] + "/variant_calling/{reference}/sccaller/dbsnp.bcf"
    log:
        "logs/dbsnp_to_bcf/{reference}/dbsnp_to_bcf.log"
    conda:
        "envs/bcftools-1-10.yaml"
    shell:
        "bcftools view -O b -o {output.bcf} {input.db} 2>{log}; "
        "bcftools index {output.bcf} 2>>{log}; "


rule filter_dbsnp_to_chrom:
    input:
        bcf = tmp + "/" + config["project_name"] + "/variant_calling/{reference}/sccaller/dbsnp.bcf",
        csi = tmp + "/" + config["project_name"] + "/variant_calling/{reference}/sccaller/dbsnp.bcf.csi"
    output:
        tmp + "/" + config["project_name"] + "/variant_calling/{reference}/sccaller/{chr,chr(?:\d{1,2}|[XYM])}.dbsnp.vcf"
    log:
        "logs/dbsnp_to_chromosome/{reference}/{chr}.log"
    conda:
        "envs/bcftools-1-10.yaml"
    resources:
        mem_gb=3
    shell:
        "bcftools view --regions {wildcards.chr} {input.bcf} >{output} 2>{log}"


rule sccaller_obtain_dbsnp_hets_per_chr:
    input:
        mp = tmp + "/" + config["project_name"] + "/variant_calling/{reference}/sccaller/{single_cell}.{chr}.sccaller.mpileup",
        db = tmp + "/" + config["project_name"] + "/variant_calling/{reference}/sccaller/{chr}.dbsnp.vcf"
    output:
        tmp + "/" + config["project_name"] + "/variant_calling/{reference}/sccaller/{single_cell,[^.]+}.{chr,chr(?:\d{1,2}|[XYM])}.dbsnp.sccaller.hsnp.bed"
    log:
        "log/variant_calling/{reference}/sccaller/{single_cell}.{chr}.dbsnp.sccaller.hsnp.log"
    conda: "envs/Benchmarking_ProSolo_py27.yaml"
    resources:
        mem_gb=3
    params: out_prefix = tmp + "/" + config["project_name"] + "/variant_calling/{reference}/sccaller/{single_cell}.{chr}.dbsnp.sccaller"
    shell:
        'sccaller -a hsnp '
        ' -i {input.mp} '
        ' --snpin {input.db} '
        ' --snp dbsnp '
        ' -o {params.out_prefix} '
        ' 2>&1 | tee {log} '


rule sccaller_call_potential_snvs_per_chr:
    input:
        mp = tmp + "/" + config["project_name"] + "/variant_calling/{reference}/sccaller/{single_cell}.{chr}.sccaller.mpileup",
        hsnp = tmp + "/" + config["project_name"] + "/variant_calling/{reference}/sccaller/{single_cell}.{chr}.{dbsnp}sccaller.hsnp.bed"
    output:
        tmp + "/" + config["project_name"] + "/variant_calling/{reference}/sccaller/{single_cell,[^.]+}.{chr,chr(?:\d{1,2}|[XYM])}.{dbsnp,(?:dbsnp\.)?}sccaller.varcall.bed"
    log:
        "log/variant_calling/{reference}/sccaller/{single_cell}.{chr}.{dbsnp}sccaller.varcall.log"
    conda: "envs/Benchmarking_ProSolo_py27.yaml"
    resources:
        mem_gb=3
    params: out_prefix = tmp + "/" + config["project_name"] + "/variant_calling/{reference}/sccaller/{single_cell}.{chr}.{dbsnp}sccaller"
    shell:
        'sccaller -a varcall '
        ' -i {input.mp} '
        ' --gss {input.hsnp} '
        ' -o {params.out_prefix} '
        ' 2>&1 | tee {log} '


rule sccaller_call_potential_snvs_per_chr_low_cov:
    input:
        mp = tmp + "/" + config["project_name"] + "/variant_calling/{reference}/sccaller/{single_cell}.{chr}.sccaller.mpileup",
        hsnp = tmp + "/" + config["project_name"] + "/variant_calling/{reference}/sccaller/{single_cell}.{chr}.{dbsnp}sccaller.hsnp.bed"
    output:
        tmp + "/" + config["project_name"] + "/variant_calling/{reference}/sccaller/{single_cell,[^.]+}.{chr,chr(?:\d{1,2}|[XYM])}.{dbsnp,(?:dbsnp\.)?}low-cov.sccaller.varcall.bed"
    log:
        "log/variant_calling/{reference}/sccaller/{single_cell}.{chr}.{dbsnp}low-cov.sccaller.varcall.log"
    conda: "envs/Benchmarking_ProSolo_py27.yaml"
    resources:
        mem_gb=3
    params: out_prefix = tmp + "/" + config["project_name"] + "/variant_calling/{reference}/sccaller/{single_cell}.{chr}.{dbsnp}low-cov.sccaller"
    shell:
        'sccaller -a varcall '
        ' -i {input.mp} '
        ' --gss {input.hsnp} '
        ' --min 4 '
        ' --minvar 1 '
        ' --RD 10 '
        ' -o {params.out_prefix} '
        ' 2>&1 | tee {log} '


rule sccaller_merge_chrs_add_cutoffs:
    input:
        varcalls = lambda wildcards: expand(
                tmp + "/" + config["project_name"] + "/variant_calling/{reference}/sccaller/{single_cell}.{chr}.{modes}sccaller.varcall.bed",
                reference = wildcards.reference,
                single_cell = wildcards.single_cell,
                chr = chrlist,
                modes = wildcards.modes)
    output:
        "variant_calling/{reference}/sccaller/{single_cell,[^.]+}.{modes,(?:dbsnp\.)?(?:low-cov\.)?}sccaller.varcall.cutoff.bed"
    log:
        "log/variant_calling/{reference}/sccaller/{single_cell}.{modes}sccaller.varcall.cutoff.log"
    resources:
        mem_gb=3
    conda: "envs/Benchmarking_ProSolo_py27.yaml"
    shell:
        'cat {input.varcalls} >{output} | '
        ' 2>&1 | tee {log}; '
        'sccaller -a cutoff '
        ' -i {output} '
        ' 2>&1 | tee -a {log} '


rule sccaller_filter_amp_error:
    input:
        "variant_calling/{reference}/sccaller/{single_cell}.{modes}sccaller.varcall.cutoff.bed"
    output:
        "variant_calling/{reference}/sccaller/{single_cell}.{modes,(?:dbsnp\.)?(?:low-cov\.)?}sccaller.varcall.cutoff.fil-amp-err_alpha_{alpha}.bed"
    log:
        "log/variant_calling/{reference}/{single_cell,[^.]+}.{modes}sccaller.varcall.cutoff.fil-amp-err_alpha_{alpha}.log"
    params: alpha = lambda wildcards: wildcards.alpha.replace('-','.')
    shell: # The weird multiplication and division is needed due to numerical issues in awk's number representation that seem to kick in for some numbers below 1.0e-300 (solution adapted from: https://unix.stackexchange.com/a/141631)
        'if [ {wildcards.alpha} == "1-0" ]; '
        'then '
        '  cp {input} {output} 2>&1 | tee {log}; '
        'else '
        '  ETA=` grep --only-matching -P "alpha={params.alpha},eta=[0-9]\.[-e0-9]+(;|$)" {input} | '
        '        sed -e \'s/alpha={params.alpha},eta=//\' -e \'s/;//\' `; '
        '  echo "extracted ETA for alpha={params.alpha}: $ETA" | tee {log}; '
        '  awk \'{{ s=int($12*1.0e+300+0.5); if ( (s/1.0e+300)!=0) {{ print $0 }} }}\' {input} | '
        '    awk -v cutoff="$ETA" \'$11/$12<cutoff && $7/($6+$7)>1/8 && $8=="PASS"\' '
        '    > {output} '
        '    2>&1 | tee -a {log}; '
        'fi '


rule sccaller_bed_to_gt_calls:
    input:
        "variant_calling/{reference}/sccaller/{single_cell}.{modes}sccaller.varcall.cutoff.fil-amp-err_alpha_{alpha}.bed"
    output:
        "variant_calling/{reference}/sccaller/som_gt_recall/{single_cell}.{modes,(?:dbsnp\.)?(?:low-cov\.)?}sccaller.varcall.cutoff.fil-amp-err_alpha_{alpha}.gt_calls.tsv"
    shell:
        '''
        awk \
        'BEGIN {{
             OFS="\\t";
             ORS="";
             print "CHROM","POS","REF","ALT","GT" "\\n";
         }}
         {{
             print $1,$2,$4,$5,"0/1" "\\n";
         }}' \
        {input} > {output}
        '''

rule sccaller_validated_somatic_recall:
    input:
        somatics = config["references"]["somatic"],
        sccaller = "variant_calling/{reference}/sccaller/som_gt_recall/{single_cell}.{modes}sccaller.varcall.cutoff.fil-amp-err_alpha_{alpha}.gt_calls.tsv"
    output:
        "variant_calling/{reference}/sccaller/som_gt_recall/{single_cell}.{modes}sccaller.varcall.cutoff.fil-amp-err_alpha_{alpha}.gt_calls.somatic_genotype_recall.tsv"
    log:
        "log/variant_calling/{reference}/sccaller/som_gt_recall/{single_cell}.{modes}sccaller.varcall.cutoff.fil-amp-err_alpha_{alpha}.gt_calls.somatic_genotype_recall.log"
    shell:
        '''
        (awk 'function str_to_gt(str) {{
              if ( str == "het" ) {{
                return "0/1"
              }} else if ( str == "hom" ) {{
                return "1/1"
              }}
            }}
            BEGIN {{
              OFS="\\t";
              ORS="";
              SUBSEP = ":";
              gt_status = "FN";
              alt_status = "FN";
              print "CHROM","POS","REF","ALT","GT","GT_CALL","ALT_PRES_CALL","CLONALITY" "\\n";
            }}
            {{
              if ( FNR==1 ) {{ for (i=1; i<=NF; i++) {{ f[$i] = i }} }}
              if ( NR == FNR ) {{ 
                if ( FNR!=1 ) {{
                  genotype[ $(f["chrom"]),$(f["pos"]),$(f["REF"]),$(f["VAR"]) ] = str_to_gt( $(f["zygosity"]) );
                  clonality[ $(f["chrom"]),$(f["pos"]),$(f["REF"]),$(f["VAR"]) ] = $(f["class"]);
                }}
              }} else {{
                if (FNR!=1) {{
                  gt = genotype[ $(f["CHROM"]),$(f["POS"]),$(f["REF"]),$(f["ALT"]) ];
                  if ( gt != "" ) {{
                    clon = clonality[ $(f["CHROM"]),$(f["POS"]),$(f["REF"]),$(f["ALT"]) ];
                    if ( $(f["GT"]) == "0/0" ) {{
                        alt_status = "FN";
                        gt_status = "FN";
                    }} else if ( $(f["GT"]) == "0/1" || $(f["GT"]) == "1/1" ) {{
                      alt_status = "TP";
                      if ( $(f["GT"]) == gt ) {{
                        gt_status = "TP";
                      }} else {{
                        gt_status = "FN";
                      }}
                    }} else {{
                        alt_status = "FN";
                        gt_status = "FN";
                        print "UNKNOWN_GENOTYPE:",$(f["GT"]) "\\n";
                    }}
                    print $(f["CHROM"]),$(f["POS"]),$(f["REF"]),$(f["ALT"]),gt,gt_status,alt_status,clon "\\n";
                  }}
                }}
              }}
            }}' {input.somatics} {input.sccaller} > {output}
        ) 2>{log}
        '''



rule sccaller_bed_to_alt_calls:
    input:
        "variant_calling/{reference}/sccaller/{single_cell}.{modes}sccaller.varcall.cutoff.fil-amp-err_alpha_{alpha}.bed"
    output:
        "variant_calling/{reference}/sccaller/{single_cell}.{modes,(?:dbsnp\.)?(?:low-cov\.)?}sccaller.varcall.cutoff.fil-amp-err_alpha_{alpha}.alt_calls.tsv"
    shell:
        '''
        awk \
        'BEGIN {{ OFS="\\t"; ORS=""; }}
         {{ print $1,$2,"ALT"; print "\\n";
         }}' \
        {input} > {output}
        '''


rule sccaller_true_false_calcs_alt_pres_gt_spec_min_sc_cov_awk_alt_calls:
    input:
        ground_truth = lambda wc: config["references"][wc.ground_truth],
        calls =
            "variant_calling/{reference}/sccaller/{single_cell}.{modes}sccaller.varcall.cutoff.fil-amp-err_alpha_{alpha}.alt_calls.tsv"
    output:
        "variant_calling/{reference}/sccaller/{single_cell}.{ground_truth}.{modes,(?:dbsnp\.)?(?:low-cov\.)?}sccaller.varcall.cutoff.fil-amp-err_alpha_{alpha}.alt_calls.awk_positives_negatives.tsv"
    log:
        "log/variant_calling/{reference}/sccaller/{single_cell}.{ground_truth}.{modes}sccaller.varcall.cutoff.fil-amp-err_alpha_{alpha}.alt_calls.awk_positives_negatives.log"
    conda:
        "envs/gawk.yaml"
    threads: 1
    resources:
        mem_gb = 5
    shell:
        '''
        awk \
        'BEGIN {{ 
          FS = "\\t"; 
          OFS = "\\t"; 
          SUBSEP = ":";
          alts["0/1"] = 1; 
          alts["1/1"] = 1; 
          refs["0/0"] = 1; 
          tp = 0;
          fp = 0;
          fn = 0;
          tn = 0;
          p_not_called = 0;
          n_not_called = 0;
          no_ground_truth = 0;
        }} 
        {{
          if ( NR == FNR ) {{ 
            if ( ($1, $2) in calls ) {{ 
              if ( $3 == "ALT" ) {{ calls[$1,$2] = $3 }} 
            }} 
            else {{ 
              n_calls += 1; 
              calls[$1, $2] = $3; 
            }} 
          }} 
          else {{ 
            if ( ($1, $2) in calls ) {{
              n_gt += 1;
              if ( calls[$1, $2] == "ALT" ) {{ 
                if ( $3 in alts ) {{ tp += 1; }} 
                else {{ 
                  if ( $3 in refs ) {{ fp += 1; }} 
                }} 
              }} 
              else {{ 
                if ( calls[$1, $2] == "REF" ) {{ 
                  if ( $3 in alts ) {{ fn += 1; }} 
                  else {{ 
                    if ( $3 in refs ) {{ tn += 1; }} 
                  }} 
                }} 
              }} 
            }} 
            else {{ 
              if ( $3 in alts ) {{ p_not_called += 1; }} 
              if ( $3 in refs ) {{ n_not_called += 1; }} 
            }} 
          }} 
        }}
        END {{ 
          no_ground_truth = n_calls - n_gt;
          print "TP", "FP", "FN", "TN", "P_not_called", "N_not_called", "no_ground_truth";
          print tp, fp, fn, tn, p_not_called, n_not_called, no_ground_truth;
        }}' \
         {input.calls} <( zcat {input.ground_truth} ) \
         >{output} \
         2>&1 | tee {log}
        '''



rule sccaller_true_false_pos_neg_calculations:
    input:
        ground_truth = config["references"]["ground_truth"],
        calls = "variant_calling/{reference}/sccaller/{sc}.{modes}sccaller.varcall.cutoff.fil-amp-err_alpha_{alpha}.bed"
    output:
        "variant_calling/{reference,[^/]+}/sccaller/{sc,[^.]+}.{modes,(?:dbsnp\.)?(?:low-cov\.)?}sccaller.varcall.cutoff.fil-amp-err_alpha_{alpha}.positives_negatives.tsv"
    log:
        "log/variant_calling/{reference}/sccaller/{sc}.{modes}sccaller.varcall.cutoff.fil-amp-err_alpha_{alpha}.positives_negatives.log"
    resources:
        mem_gb = 20
    shell:
        "Rscript --vanilla " + include_prefix + "scripts/sccaller.P-N_stats.alt-calling.R "
        " --gt {input.ground_truth} "
        " --calls {input.calls} "
        " --out {output} "
        " 2>&1 | tee {log} "
 
