# vim: syntax=python tabstop=4 expandtab
# coding: utf-8


"""
ProSolo variant calling for single cell data with a bulk backgroun
"""


__author__ = "David Laehnemann (david.laehnemann@hhu.de)"
__license__ = "MIT"

def _get_ref(wildcards):
    return config["references"][wildcards.reference]


def _sample_to_runs(sample):
    return config["samples"][sample]

# get chromosome file if defined in config.json, set to undefined otherwise
# the file should contain the name of one chromosome per line
chrfile = config["references"].get("chromosomes","undefined")
if chrfile == "undefined":
    chrlist = ['chr1', 'chr2', 'chr3', 'chr4', 'chr5', 'chr6', 'chr7',
               'chr8', 'chr9', 'chr10', 'chr11', 'chr12', 'chr13', 'chr14',
               'chr15', 'chr16', 'chr17', 'chr18', 'chr19', 'chr20', 'chr21',
               'chr22', 'chrX']
else:
    chrlist = open(chrfile).read().splitlines()

## prosolo candidate generation rules

rule generate_candidates_bcftools_with_hom_ref_sites_per_chr:
    input:
        ref = _get_ref,
        sc = "mapping/{reference}/samples/{sc}.bps.sorted.bam",
        blk = "mapping/{reference}/samples/{blk}.bps.sorted.bam"
    output:
        "variant_calling/{reference,[^/]+}/prosolo/{sc}.{blk}.prosolo_candidates.with_hom_ref_sites.{chrom}.bcf"
    log:
        "log/variant_calling/{reference}/prosolo/{sc}.{blk}.prosolo_candidates.with_hom_ref_sites.{chrom}.log"
    params:
        main_bcf = "{sc}.{blk}.prosolo_candidates.with_hom_ref_sites.{chrom}main.tmp.bcf",
        multiallelic_bcf = "{sc}.{blk}.prosolo_candidates.with_hom_ref_sites.{chrom}.multiallelic.tmp.bcf",
        no_alt_bcf = "{sc}.{blk}.prosolo_candidates.with_hom_ref_sites.{chrom}.no-alt.tmp.bcf",
    shell:
        "( bcftools mpileup -f {input.ref} --regions {wildcards.chrom} --annotate FORMAT/DP --no-BAQ -O u {input.sc} {input.blk} | "
        "    bcftools view -i 'MIN(FORMAT/DP)>2' -O b -o {params.main_bcf} ) 2> {log}; "
        "( bcftools view -e 'ALT==\"<*>\"' {params.main_bcf} | "
        "    bcftools norm -m -any | "
        "    bcftools view -e 'ALT==\"<*>\"' -O b -o {params.multiallelic_bcf} ) 2>> {log}; "
        "bcftools index {params.multiallelic_bcf} 2>> {log}; "
        "bcftools view -i 'ALT==\"<*>\"' -O b -o {params.no_alt_bcf} {params.main_bcf} 2>> {log}; "
        "bcftools index {params.no_alt_bcf} 2>> {log}; "
        "bcftools concat --allow-overlaps -O b -o {output} "
        "  {params.multiallelic_bcf} {params.no_alt_bcf} 2>> {log}; "
        "rm {params.main_bcf} {params.multiallelic_bcf} {params.multiallelic_bcf}.csi "
        "  {params.no_alt_bcf} {params.no_alt_bcf}.csi 2>> {log}; "


rule generate_candidates_bcftools_alt_sites_only_per_chr:
    input:
        ref = _get_ref,
        sc = "mapping/{reference}/samples/{sc}.bps.sorted.bam",
        sc_idx = "mapping/{reference}/samples/{sc}.bps.sorted.bam.bai",
        blk = "mapping/{reference}/samples/{blk}.bps.sorted.bam",
        blk_idx = "mapping/{reference}/samples/{blk}.bps.sorted.bam.bai"
    output:
        "variant_calling/{reference,[^/]+}/prosolo/{sc}.{blk}.prosolo_candidates.alt_sites_only.{chrom}.bcf"
    log:
        "log/variant_calling/{reference}/prosolo/{sc}.{blk}.prosolo_candidates.alt_sites_only.{chrom}.log"
    shell:
        "( bcftools mpileup -f {input.ref} --regions {wildcards.chrom} --annotate FORMAT/DP --no-BAQ -O u {input.sc} {input.blk} | "
        "    bcftools view -i 'N_ALT>1' -O u | "
        "    bcftools norm -m -any -O u | "
        "    bcftools view -e 'ALT==\"<*>\"' -O b -o {output} ) 2>> {log}; "


rule split_candidates_chr_region:
    input:
        bcf =
        "variant_calling/{reference}/prosolo/{sc}.{blk}.prosolo_candidates.{candidates_type}.{chrom}.bcf",
        idx =
        "variant_calling/{reference}/prosolo/{sc}.{blk}.prosolo_candidates.{candidates_type}.{chrom}.bcf.csi",
    output:
        tmp + "/" + config["project_name"] + "/variant_calling/{reference,[^/]+}/prosolo/{sc}.{blk}.prosolo_candidates.{candidates_type}.{chrom}:{region}.bcf"
    log:
        "log/variant_calling/{reference}/prosolo_split_candidates/{sc}.{blk}.prosolo_candidates.{candidates_type}.split.{chrom}:{region}.log"
    shell: "bcftools view --regions {wildcards.chrom}:{wildcards.region} -O b -o {output} {input.bcf}"

## rules and functions for parallelising and gathering prosolo runs

rule prosolo:
    input:
        ref = _get_ref,
        candidates = tmp + "/" + config["project_name"] + "/variant_calling/{reference}/prosolo/{sc}.{blk}.prosolo_candidates.{candidates_type}.{chrom}:{region}.bcf",
        sc = "mapping/{reference}/samples/{sc}.bps.sorted.bam",
        sc_index = "mapping/{reference}/samples/{sc}.bps.sorted.bam.bai",
        blk = "mapping/{reference}/samples/{blk}.bps.sorted.bam",
        blk_index = "mapping/{reference}/samples/{blk}.bps.sorted.bam.bai",
    output:
        bcf = tmp + "/" + config["project_name"] + "/variant_calling/{reference,[^/]+}/prosolo/{sc}.{blk}.{candidates_type}.{chrom}:{region}.prosolo.bcf"
    resources:
        mem_gb=3
    log:
        "log/variant_calling/{reference}/prosolo/{sc}.{blk}.{candidates_type}.{chrom}:{region}.prosolo.log"
    benchmark:
        "benchmark/variant_calling/{reference}/prosolo/{sc}.{blk}.{candidates_type}.{chrom}:{region}.prosolo.tsv"
    shell:
        '''
        prosolo single-cell-bulk --omit-indels \
        --candidates {input.candidates} \
        --output {output.bcf} \
        {input.sc} \
        {input.blk} \
        {input.ref}
        '''

import csv

def _create_chr_region_bcfs(wildcards):
    fai = config["references"][wildcards.reference] + ".fai"
    with open(fai, newline='') as tsv:
        for line in csv.reader(tsv, delimiter="\t" ):
            if line[0] == wildcards.chrom:
                chr_length = int(line[1])
    file_list = []
    step_size = 3000000
    start = 1
    end = step_size
    while end < chr_length:
        file_list.append( tmp + "/" + config["project_name"] + "/variant_calling/" + wildcards.reference + "/prosolo/" +
                            wildcards.sc + "." + wildcards.blk + "." +
                            wildcards.candidates_type + "." +
                            wildcards.chrom + ":" + str(start) + "-" + str(end) + ".prosolo.bcf" )
        start += step_size
        end += step_size
    file_list.append( tmp + "/" + config["project_name"] + "/variant_calling/" + wildcards.reference + "/prosolo/" +
                        wildcards.sc + "." + wildcards.blk + "." +
                            wildcards.candidates_type + "." +
                        wildcards.chrom + ":" + str(start) + "-" + str(chr_length) + ".prosolo.bcf" )
    return file_list


rule bcftools_concat_regions_per_chr_prosolo_bcf:
    '''
    Concatenate region specific BCF files produced by variant calling into BCF
    files per chromosome.
    '''
    input:
        bcfs = _create_chr_region_bcfs
    output: tmp + "/" + config["project_name"] + "/variant_calling/{reference,[^/]+}/prosolo/{sc,[^.]+}.{blk,[^.]+}.{candidates_type}.{chrom,[^.:-]+}.prosolo.bcf"
    log: "log/variant_calling/{reference}/prosolo/{sc}.{blk}.{candidates_type}.{chrom}.bcftools_concat_regions_per_chr_bcf.prosolo.log"
    threads: 1
    shell:
        "bcftools concat "
        "--output-type b "
        "--output {output} "
        "{input.bcfs} "
        "2>&1 | tee {log} "

rule bcftools_concat_chrs_prosolo_bcf:
    '''
    Concatenate per-chromosome BCF files produced by merging regions.
    '''
    input:
        bcfs = [ tmp + "/" + config["project_name"] + "/variant_calling/{reference}/prosolo/{sc}.{blk}.{candidates_type}." +
                    chrom + ".prosolo.bcf" for chrom in chrlist ]
    output: "variant_calling/{reference}/prosolo/{sc,[^.]+}.{blk,[^.]+}.{candidates_type,(with_hom_ref_sites|alt_sites_only)}.prosolo.bcf"
    log: "log/variant_calling/{reference}/prosolo/{sc}.{blk}.{candidates_type}.bcftools_concat_chrs_bcf.prosolo.log"
    threads: 1
    shell:
        "bcftools concat "
        "--output-type b "
        "--output {output} "
        "{input.bcfs} "
        "2>&1 | tee {log} "

## rules for working with prosolo calls

rule prosolo_min_sc_cov_bcf:
    '''
    Filter prosolo calls to a minimum coverage in the single cell sample.
    '''
    input:
        "variant_calling/{reference}/prosolo/{sc}.{blk}.{candidates_type}.prosolo.bcf",
    output:
        "variant_calling/{reference}/prosolo/{sc}.{blk}.{candidates_type,(with_hom_ref_sites|alt_sites_only)}.prosolo.min_sc_cov_{min_sc_cov,\d+}.bcf"
    log:
        "log/variant_calling/{reference}/prosolo/{sc}.{blk}.{candidates_type}.prosolo.min_sc_cov_{min_sc_cov}.log"
    resources:
        mem_gb=11
    conda:
        "envs/bcftools-1-10.yaml"
    shell:
        '''
        bcftools norm \
        --multiallelic \
        -any \
        {input} | \
        bcftools view \
        --exclude 'FORMAT/DP[0]<{wildcards.min_sc_cov}' \
        --types snps \
        -O b \
        -o {output}
        '''


rule prosolo_filtered_out_of_all:
    input:
        filtered = "variant_calling/{reference}/prosolo/{filter_folder}/{sc}.{blk}.{candidates_type}.{filter}.prosolo.bcf",
        all = "variant_calling/{reference}/prosolo/{sc}.{blk}.{candidates_type}.prosolo.bcf"
    output:
        "variant_calling/{reference}/prosolo/{filter_folder}/{sc,[^.]+}.{blk,[^.]+}.{candidates_type,(with_hom_ref_sites|alt_sites_only)}.{filter}.prosolo.fraction.tsv"
    log:
        "log/variant_calling/{reference}/prosolo/{filter_folder}/{sc}.{blk}.{candidates_type}.{filter}.prosolo.log"
    threads: 1
    shell:
        'FILTERED=`bcftools view -H --types snps {input.filtered} | wc -l`; '
        'ALL=`bcftools view -H --types snps {input.all} | wc -l`; '
        'echo -e "CELL\tBULK\tFILTER\tCANDIDATES_TYPE\tCALLS_AFTER_FILTER\tALL_CALLS\tFRACTION_AFTER_FILTER" > {output} | 2>&1 | tee {log} ;'
        'echo -n -e "{wildcards.sc}\t{wildcards.blk}\t{wildcards.filter}\t{wildcards.candidates_type}\t${{FILTERED}}\t${{ALL}}\t" >> {output} | 2>&1 | tee -a {log} ;'
        'echo "$FILTERED / $ALL" | bc -l >> {output} | 2>&1 | tee -a {log} ;'

### rules for false discovery rate control

rule prosolo_fdr_alt_presence:
    input:
        bcf = "variant_calling/{reference}/prosolo/{sc}.{blk}.{candidates_type}.prosolo{min_sc_cov}.bcf"
    output:
        bcf = "variant_calling/{reference}/prosolo/fdr_alt-presence/{sc,[^.]+}.{blk,[^.]+}.{candidates_type,(with_hom_ref_sites|alt_sites_only)}.fdr_{fdr,[^.]+}_alt-presence.prosolo{min_sc_cov,(\.min_sc_cov_\d+|)}.bcf",
    log:
        "log/variant_calling/{reference}/prosolo/{sc}.{blk}.{candidates_type}.fdr_{fdr}_alt-presence.prosolo{min_sc_cov}.log"
    params: fdr = lambda wildcards: wildcards.fdr.replace('-','.')
    resources:
        mem_gb=3
    shell:
        'prosolo control-fdr '
        ' {input.bcf} '
        ' --events ADO_TO_REF,ADO_TO_ALT,HOM_ALT,HET,ERR_REF ' # all the events that indicate the presence of an ALT allele
        ' --var SNV '
        ' --fdr {params.fdr} '
        ' --output {output.bcf} '
        '  2>&1 | tee {log}; '


## rules for converting prosolo output to TSVs with only the likelihood values


rule prosolo_to_tsv:
    input:
        "variant_calling/{reference}/prosolo/{sc}.{blk}.{candidates_type}.prosolo{min_sc_cov}.bcf",
    output:
        "variant_calling/{reference}/prosolo/{sc}.{blk}.{candidates_type,(with_hom_ref_sites|alt_sites_only)}.prosolo{min_sc_cov,(\.min_sc_cov_\d+|)}.tsv"
    log:
        "log/variant_calling/{reference}/prosolo/{sc}.{blk}.{candidates_type}.prosolo_to_tsv{min_sc_cov}.log"
    shell:
        '''
        bcftools norm \
        --multiallelic \
        -any \
        {input} | \
        bcftools view -H \
        --types snps | \
        awk 'BEGIN {{ OFS="\\t"; ORS=""; }} \
        {{ split($8,INFO,";"); \
            for (i in INFO) {{ \
                if ( match(INFO[i],"PROB_|_AF") == 0 ) {{ delete INFO[i]; }}; \
            }}; \
            if ( NR == 1 ) {{
                print "CHROM\\tPOS\\tREF\\tALT"; \
                for (i in INFO) {{ split(INFO[i],header,"="); print "\\t"header[1]; }}; \
            }} \
            print "\\n"; print $1,$2,$4,$5; \
            for (i in INFO) {{ split(INFO[i],pair,"="); print "\\t"pair[2]; }}; \
        }}' \
        > {output}
        '''


rule prosolo_fdr_to_tsv:
    input:
        "variant_calling/{reference}/prosolo/fdr_{event_set}/{sc}.{blk}.{candidates_type}.fdr_{fdr}_{event_set}.prosolo{min_sc_cov}.bcf",
    output:
        "variant_calling/{reference}/prosolo/fdr_{event_set}/{sc}.{blk}.{candidates_type,(with_hom_ref_sites|alt_sites_only)}.fdr_{fdr}_{event_set}.prosolo{min_sc_cov,(\.min_sc_cov_\d+|)}.tsv"
    log:
        "log/variant_calling/{reference}/prosolo/fdr_{event_set}/{sc}.{blk}.{candidates_type}.fdr_{fdr}_{event_set}.prosolo_to_tsv{min_sc_cov}.log"
    shell:
        '''
        bcftools norm \
        --multiallelic \
        -any \
        {input} | \
        bcftools view -H \
        --types snps | \
        awk 'BEGIN {{ OFS="\\t"; ORS=""; }} \
        {{ split($8,INFO,";"); \
            for (i in INFO) {{ \
                if ( match(INFO[i],"PROB_|_AF") == 0 ) {{ delete INFO[i]; }}; \
            }}; \
            if ( NR == 1 ) {{
                print "CHROM\\tPOS\\tREF\\tALT"; \
                for (i in INFO) {{ split(INFO[i],header,"="); print "\\t"header[1]; }}; \
            }} \
            print "\\n"; print $1,$2,$4,$5; \
            for (i in INFO) {{ split(INFO[i],pair,"="); print "\\t"pair[2]; }}; \
        }}' \
        > {output}
        '''

rule prosolo_tsv_to_alt_calls:
    input:
        "variant_calling/{reference}/prosolo/fdr_{event_set}/{sc}.{blk}.{candidates_type}.fdr_{fdr}_{event_set}.prosolo{min_sc_cov}.tsv"
    output:
        "variant_calling/{reference}/prosolo/fdr_{event_set}/{sc}.{blk}.{candidates_type,(with_hom_ref_sites|alt_sites_only)}.fdr_{fdr}_{event_set}.prosolo{min_sc_cov,(\.min_sc_cov_\d+|)}.alt_calls.ML_set.tsv"
    threads: 2
    shell:
        '''
        awk 'function decode_phred(phred) {{ return 10^(-phred/10) }} \
            BEGIN {{ OFS="\\t"; ORS=""; }} \
            NR==1  {{ for (i=1; i<=NF; i++) {{ f[$i] = i }} }} \
            NR!=1 {{ prob_ref_set = decode_phred( $(f["PROB_HOM_REF"]) ) + decode_phred($(f["PROB_ERR_ALT"]) ); \
                prob_alt_set = decode_phred( $(f["PROB_HOM_ALT"]) ) + decode_phred($(f["PROB_ERR_REF"]) ) + decode_phred($(f["PROB_HET"]) ) + decode_phred($(f["PROB_ADO_TO_ALT"]) ) + decode_phred($(f["PROB_ADO_TO_REF"]) ); \
                if (prob_ref_set < prob_alt_set) \
                    {{ alt_status = "ALT" }} \
                else {{ alt_status = "REF" }}; \
                print $(f["CHROM"]),$(f["POS"]),alt_status; print "\\n" \
            }}' {input} > {output}
        '''

rule prosolo_tsv_to_gt:
    input:
        "variant_calling/{reference}/prosolo/fdr_{event_set}/{sc}.{blk}.{candidates_type}.fdr_{fdr}_{event_set}.prosolo{min_sc_cov}.tsv"
    output:
        "variant_calling/{reference}/prosolo/fdr_{event_set}/{sc}.{blk}.{candidates_type,(with_hom_ref_sites|alt_sites_only)}.fdr_{fdr}_{event_set}.prosolo{min_sc_cov,(\.min_sc_cov_\d+|)}.genotypes.ML_set.tsv"
    log:
        "log/variant_calling/{reference}/prosolo/fdr_{event_set}/{sc}.{blk}.{candidates_type,(with_hom_ref_sites|alt_sites_only)}.fdr_{fdr}_{event_set}.prosolo{min_sc_cov,(\.min_sc_cov_\d+|)}.genotypes.ML_set.log"
    threads: 1
    shell:
        '''
        (awk 'function decode_phred(phred) {{ return 10^(-phred/10) }} \
            BEGIN {{ OFS="\\t"; ORS=""; }} \
            NR==1  {{ for (i=1; i<=NF; i++) {{ f[$i] = i }} }} \
            NR!=1 {{ \
                prob_hom_ref_set = decode_phred( $(f["PROB_HOM_REF"]) ) + decode_phred($(f["PROB_ERR_ALT"]) ); \
                prob_hom_alt_set = decode_phred( $(f["PROB_HOM_ALT"]) ) + decode_phred($(f["PROB_ERR_REF"]) ); \
                prob_het_set = decode_phred($(f["PROB_HET"]) ) + decode_phred($(f["PROB_ADO_TO_ALT"]) ) + decode_phred($(f["PROB_ADO_TO_REF"]) ); \
                if ( (prob_het_set >= prob_hom_ref_set) && (prob_het_set >= prob_hom_alt_set) ) \
                    {{ genotype = "het" }} \
                else {{ \
                    if (prob_hom_alt_set >= prob_hom_ref_set) \
                        {{ genotype = "hom" }} \
                    else {{ genotype = "ref" }} \
                }}; \
                print $(f["CHROM"]),$(f["POS"]),$(f["REF"]),$(f["ALT"]),genotype; print "\\n" \
            }}' {input} > {output}
        ) 2>{log}
        '''

rule prosolo_tsv_to_gt_calls:
    input:
        "variant_calling/{reference}/prosolo/fdr_{event_set}/{sc}.{blk}.{candidates_type}.fdr_{fdr}_{event_set}.prosolo{min_sc_cov}.tsv"
    output:
        "variant_calling/{reference}/prosolo/fdr_{event_set}/som_gt_recall/{sc}.{blk}.{candidates_type,(with_hom_ref_sites|alt_sites_only)}.fdr_{fdr}_{event_set}.prosolo{min_sc_cov,(\.min_sc_cov_\d+|)}.gt_calls.ML_set.tsv"
    log:
        "log/variant_calling/{reference}/prosolo/fdr_{event_set}/som_gt_recall/{sc}.{blk}.{candidates_type,(with_hom_ref_sites|alt_sites_only)}.fdr_{fdr}_{event_set}.prosolo{min_sc_cov,(\.min_sc_cov_\d+|)}.gt_calls.ML_set.log"
    threads: 1
    shell:
        '''
        (awk 'function decode_phred(phred) {{ return 10^(-phred/10) }} \
            BEGIN {{
                OFS="\\t";
                ORS="";
                print "CHROM","POS","REF","ALT","GT" "\\n"
            }}
            NR==1  {{ for (i=1; i<=NF; i++) {{ f[$i] = i }} }}
            NR!=1 {{
                prob_hom_ref_set = decode_phred( $(f["PROB_HOM_REF"]) ) + decode_phred($(f["PROB_ERR_ALT"]) );
                prob_hom_alt_set = decode_phred( $(f["PROB_HOM_ALT"]) ) + decode_phred($(f["PROB_ERR_REF"]) );
                prob_het_set = decode_phred($(f["PROB_HET"]) ) + decode_phred($(f["PROB_ADO_TO_ALT"]) ) + decode_phred($(f["PROB_ADO_TO_REF"]) );
                if ( (prob_het_set >= prob_hom_ref_set) && (prob_het_set >= prob_hom_alt_set) )
                    {{ genotype = "0/1" }}
                else {{
                    if (prob_hom_alt_set >= prob_hom_ref_set)
                        {{ genotype = "1/1" }}
                    else {{ genotype = "0/0" }}
                }};
                print $(f["CHROM"]),$(f["POS"]),$(f["REF"]),$(f["ALT"]),genotype; print "\\n"
            }}' {input} > {output}
        ) 2>{log}
        '''

rule prosolo_validated_somatic_recall:
    input:
        somatics = config["references"]["somatic"],
        prosolo = "variant_calling/{reference}/prosolo/fdr_{event_set}/som_gt_recall/{sc}.{blk}.{candidates_type}.fdr_{fdr}_{event_set}.prosolo{min_sc_cov}.gt_calls.ML_set.tsv"
    output:
        "variant_calling/{reference}/prosolo/fdr_{event_set}/som_gt_recall/{sc}.{blk}.{candidates_type}.fdr_{fdr}_{event_set}.prosolo{min_sc_cov}.gt_calls.ML_set.somatic_genotype_recall.tsv"
    log:
        "log/variant_calling/{reference}/prosolo/fdr_{event_set}/som_gt_recall/{sc}.{blk}.{candidates_type}.fdr_{fdr}_{event_set}.prosolo{min_sc_cov}.gt_calls.ML_set.somatic_genotype_recall.log"
    resources:
        mem_gb = 5
    shell:
        '''
        (awk 'function str_to_gt(str) {{
              if ( str == "het" ) {{
                return "0/1"
              }} else if ( str == "hom" ) {{
                return "1/1"
              }}
            }}
            BEGIN {{
              OFS="\\t";
              ORS="";
              SUBSEP = ":";
              gt_status = "FN";
              alt_status = "FN";
              print "CHROM","POS","REF","ALT","GT","GT_CALL","ALT_PRES_CALL","CLONALITY" "\\n";
            }}
            {{
              if ( FNR==1 ) {{ for (i=1; i<=NF; i++) {{ f[$i] = i }} }}
              if ( NR == FNR ) {{ 
                if ( FNR!=1 ) {{
                  genotype[ $(f["chrom"]),$(f["pos"]),$(f["REF"]),$(f["VAR"]) ] = str_to_gt( $(f["zygosity"]) );
                  clonality[ $(f["chrom"]),$(f["pos"]),$(f["REF"]),$(f["VAR"]) ] = $(f["class"]);
                }}
              }} else {{
                if (FNR!=1) {{
                  gt = genotype[ $(f["CHROM"]),$(f["POS"]),$(f["REF"]),$(f["ALT"]) ];
                  if ( gt != "" ) {{
                    clon = clonality[ $(f["CHROM"]),$(f["POS"]),$(f["REF"]),$(f["ALT"]) ];
                    if ( $(f["GT"]) == "0/0" ) {{
                        alt_status = "FN";
                        gt_status = "FN";
                    }} else if ( $(f["GT"]) == "0/1" || $(f["GT"]) == "1/1" ) {{
                      alt_status = "TP";
                      if ( $(f["GT"]) == gt ) {{
                        gt_status = "TP";
                      }} else {{
                        gt_status = "FN";
                      }}
                    }} else {{
                        alt_status = "FN";
                        gt_status = "FN";
                        print "UNKNOWN_GENOTYPE:",$(f["GT"]) "\\n";
                    }}
                    print $(f["CHROM"]),$(f["POS"]),$(f["REF"]),$(f["ALT"]),$(f["GT"]),gt_status,alt_status,clon "\\n";
                  }}
                }}
              }}
            }}' {input.somatics} {input.prosolo} > {output}
        ) 2>{log}
        '''



rule prosolo_to_ground_truth_hets_only_tsv:
    input:
        prosolo = "variant_calling/{reference}/prosolo/{sc}.{blk}.{candidates_type}.prosolo{min_sc_cov}.bcf",
        ground_truth = config["references"]["ground_truth"]
    output:
        "variant_calling/{reference}/prosolo/{sc}.{blk}.{candidates_type,(with_hom_ref_sites|alt_sites_only)}.prosolo{min_sc_cov,(\.min_sc_cov_\d+|)}.ground_truth_hets_only.tsv"
    log:
        "log/variant_calling/{reference}/prosolo/{sc}.{blk}.{candidates_type}.prosolo_to_tsv{min_sc_cov}.ground_truth_hets_only.log"
    threads: 3
    params:
        ground_truth = "variant_calling/{reference}/prosolo/{sc}.{blk}.{candidates_type}.prosolo_to_tsv{min_sc_cov}.ground_truth_hets_only.ground_truth.tmp.tsv.gz"
    shell:
        '''
        ( \
        zcat {input.ground_truth} | \
        awk '{{ if ($3 == "0/1") {{print $1,$2}} }}' OFS="\\t" | \
        bgzip -c >{params.ground_truth} ; \
        bcftools norm \
          --multiallelic \
          -any \
          -O b \
          {input.prosolo} | \
        bcftools view \
          -H \
          --types snps \
          --targets-file {params.ground_truth} | \
        awk 'BEGIN {{ OFS="\\t"; ORS=""; }} \
        {{ split($8,INFO,";"); \
            for (i in INFO) {{ \
                if ( match(INFO[i],"PROB_|_AF") == 0 ) {{ delete INFO[i]; }}; \
            }}; \
            if ( NR == 1 ) {{
                print "CHROM\\tPOS\\tREF\\tALT"; \
                for (i in INFO) {{ split(INFO[i],header,"="); print "\\t"header[1]; }}; \
            }} \
            print "\\n"; print $1,$2,$4,$5; \
            for (i in INFO) {{ split(INFO[i],pair,"="); print "\\t"pair[2]; }}; \
        }}' \
        > {output} \
        ) 2> {log}
        '''


rule prosolo_to_minGQ_30_ground_truth_hets_only_tsv:
    input:
        prosolo = "variant_calling/{reference}/prosolo/{sc}.{blk}.{candidates_type}.prosolo{min_sc_cov}.bcf",
        ground_truth = config["references"]["ground_truth_minGQ_30"],
    output:
        "variant_calling/{reference}/prosolo/{sc}.{blk}.{candidates_type,(with_hom_ref_sites|alt_sites_only)}.prosolo{min_sc_cov,(\.min_sc_cov_\d+|)}.minGQ_30.ground_truth_hets_only.tsv"
    log:
        "log/variant_calling/{reference}/prosolo/{sc}.{blk}.{candidates_type}.prosolo_to_tsv{min_sc_cov}.minGQ_30.ground_truth_hets_only.log"
    threads: 3
    params:
        ground_truth = "variant_calling/{reference}/prosolo/{sc}.{blk}.{candidates_type}.prosolo_to_tsv{min_sc_cov}.minGQ_30.ground_truth_hets_only.ground_truth.tmp.tsv.gz"
    shell:
        '''
        ( \
        zcat {input.ground_truth} | \
        awk '{{ if ($3 == "0/1") {{print $1,$2}} }}' OFS="\\t" | \
        bgzip -c >{params.ground_truth} ; \
        bcftools norm \
          --multiallelic \
          -any \
          -O b \
          {input.prosolo} | \
        bcftools view \
          -H \
          --types snps \
          --targets-file {params.ground_truth} | \
        awk 'BEGIN {{ OFS="\\t"; ORS=""; }} \
        {{ split($8,INFO,";"); \
            for (i in INFO) {{ \
                if ( match(INFO[i],"PROB_|_AF") == 0 ) {{ delete INFO[i]; }}; \
            }}; \
            if ( NR == 1 ) {{
                print "CHROM\\tPOS\\tREF\\tALT"; \
                for (i in INFO) {{ split(INFO[i],header,"="); print "\\t"header[1]; }}; \
            }} \
            print "\\n"; print $1,$2,$4,$5; \
            for (i in INFO) {{ split(INFO[i],pair,"="); print "\\t"pair[2]; }}; \
        }}' \
        > {output} \
        ) 2> {log}
        '''



## rules to calculate expectation values of compound event's likelihoods

rule prosolo_min_sc_cov_event_rate_expectation:
    input:
        calls =
        "variant_calling/{reference}/prosolo/{sc}.{blk}.{candidates_type}.prosolo.min_sc_cov_{min_sc_cov}{minGQ}{ground_truth}.tsv"
    output:
        "variant_calling/{reference}/prosolo/{event_set}-rate/{sc}.{blk}.{candidates_type,(with_hom_ref_sites|alt_sites_only)}.prosolo.min_sc_cov_{min_sc_cov,\d}{minGQ,(\.minGQ_30|)}{ground_truth, (\.ground_truth_hets_only|)}.expected-{event_set}-rate.tsv"
    log:
        "log/variant_calling/{reference}/prosolo/{event_set}-rate/{sc}.{blk}.{candidates_type}.prosolo.min_sc_cov_{min_sc_cov}{minGQ}{ground_truth}.expected-{event_set}-rate.log"
    resources:
        mem_gb = 20
    shell:
        "Rscript --vanilla " + include_prefix + "scripts/prosolo.expected-{wildcards.event_set}.R "
        " --calls {input.calls} "
        " --out {output} "
        " 2>&1 | tee {log} "


## rules to calculate prosolo false positives and negatives of alternative allele calling against provided ground truth genotypes


rule prosolo_true_false_pos_neg_calculations_alt_presence_min_sc_cov:
    input:
        ground_truth = config["references"]["ground_truth"],
        calls =
        "variant_calling/{reference}/prosolo/fdr_alt-presence/{sc}.{blk}.{candidates_type}.fdr_{fdr}_alt-presence.prosolo{min_sc_cov}.tsv"
    output:
        "variant_calling/{reference}/prosolo/fdr_alt-presence/{sc}.{blk}.{candidates_type,(with_hom_ref_sites|alt_sites_only)}.fdr_{fdr}_alt-presence.prosolo{min_sc_cov,(\.min_sc_cov_\d+|)}.positives_negatives.ML_set.tsv"
    log:
        "log/variant_calling/{reference}/prosolo/fdr_alt-presence/{sc}.{blk}.{candidates_type}.fdr_{fdr}_alt-presence.prosolo{min_sc_cov}.positives_negatives.ML_set.log"
    resources:
        mem_gb = 30
    shell:
        "Rscript --vanilla " + include_prefix + "scripts/prosolo.P-N_stats.alt-calling.R "
        " --gt {input.ground_truth} "
        " --calls {input.calls} "
        " --out {output} "
        " 2>&1 | tee {log} "

rule prosolo_true_false_pos_neg_calculations_alt_presence_min_sc_cov_alt_calls:
    input:
        ground_truth = config["references"]["ground_truth"],
        calls =
        "variant_calling/{reference}/prosolo/fdr_alt-presence/{sc}.{blk}.{candidates_type}.fdr_{fdr}_alt-presence.prosolo{min_sc_cov}.alt_calls.ML_set.tsv"
    output:
        "variant_calling/{reference}/prosolo/fdr_alt-presence/{sc}.{blk}.{candidates_type,(with_hom_ref_sites|alt_sites_only)}.fdr_{fdr}_alt-presence.prosolo{min_sc_cov,(\.min_sc_cov_\d+|)}.alt_calls.positives_negatives.ML_set.tsv"
    log:
        "log/variant_calling/{reference}/prosolo/fdr_alt-presence/{sc}.{blk}.{candidates_type}.fdr_{fdr}_alt-presence.prosolo{min_sc_cov}.alt_calls.positives_negatives.ML_set.log"
    threads: 2
    resources:
        mem_gb = 20
    shell:
        "Rscript --vanilla " + include_prefix + "scripts/prosolo.P-N_stats.alt_calls.ground_truth.R "
        " --gt {input.ground_truth} "
        " --calls {input.calls} "
        " --out {output} "
        " 2>&1 | tee {log} "

rule prosolo_true_false_pos_neg_calculations_alt_presence_min_sc_cov_awk_alt_calls:
    input:
        ground_truth = config["references"]["ground_truth"],
        calls =
        "variant_calling/{reference}/prosolo/fdr_alt-presence/{sc}.{blk}.{candidates_type}.fdr_{fdr}_alt-presence.prosolo{min_sc_cov}.alt_calls.ML_set.tsv"
    output:
        "variant_calling/{reference}/prosolo/fdr_alt-presence/{sc}.{blk}.{candidates_type,(with_hom_ref_sites|alt_sites_only)}.fdr_{fdr}_alt-presence.prosolo{min_sc_cov,(\.min_sc_cov_\d+|)}.alt_calls.awk_positives_negatives.ML_set.tsv"
    log:
        "log/variant_calling/{reference}/prosolo/fdr_alt-presence/{sc}.{blk}.{candidates_type}.fdr_{fdr}_alt-presence.prosolo{min_sc_cov}.alt_calls.positives_negatives.ML_set.log"
    conda:
        "envs/gawk.yaml"
    threads: 2
    resources:
        mem_gb = 5
    shell:
        '''
        awk \
        'BEGIN {{ 
          FS = "\\t"; 
          OFS = "\\t"; 
          SUBSEP = ":";
          alts["0/1"] = 1; 
          alts["1/1"] = 1; 
          refs["0/0"] = 1; 
          tp = 0;
          fp = 0;
          fn = 0;
          tn = 0;
          p_not_called = 0;
          n_not_called = 0;
          no_ground_truth = 0;
        }} 
        {{
          if ( NR == FNR ) {{ 
            if ( ($1, $2) in calls ) {{ 
              if ( $3 == "ALT" ) {{ calls[$1,$2] = $3 }} 
            }} 
            else {{ 
              n_calls += 1; 
              calls[$1, $2] = $3; 
            }} 
          }} 
          else {{ 
            if ( ($1, $2) in calls ) {{
              n_gt += 1;
              if ( calls[$1, $2] == "ALT" ) {{ 
                if ( $3 in alts ) {{ tp += 1; }} 
                else {{ 
                  if ( $3 in refs ) {{ fp += 1; }} 
                }} 
              }} 
              else {{ 
                if ( calls[$1, $2] == "REF" ) {{ 
                  if ( $3 in alts ) {{ fn += 1; }} 
                  else {{ 
                    if ( $3 in refs ) {{ tn += 1; }} 
                  }} 
                }} 
              }} 
            }} 
            else {{ 
              if ( $3 in alts ) {{ p_not_called += 1; }} 
              if ( $3 in refs ) {{ n_not_called += 1; }} 
            }} 
          }} 
        }}
        END {{ 
          no_ground_truth = n_calls - n_gt;
          print "TP", "FP", "FN", "TN", "P_not_called", "N_not_called", "no_ground_truth";
          print tp, fp, fn, tn, p_not_called, n_not_called, no_ground_truth;
        }}' \
         {input.calls} <( zcat {input.ground_truth} ) \
         >{output} \
         2>&1 | tee {log}
        '''

rule prosolo_true_false_calcs_alt_pres_gt_spec_min_sc_cov_awk_alt_calls:
    input:
        ground_truth = lambda wc: config["references"][wc.ground_truth],
        calls =
            "variant_calling/{reference}/prosolo/fdr_alt-presence/{sc}.{blk}.{candidates_type}.fdr_{fdr}_alt-presence.prosolo{min_sc_cov}.alt_calls.ML_set.tsv"
    output:
        "variant_calling/{reference}/prosolo/fdr_alt-presence/{sc}.{blk}.{ground_truth}.{candidates_type,(with_hom_ref_sites|alt_sites_only)}.fdr_{fdr}_alt-presence.prosolo{min_sc_cov,(\.min_sc_cov_\d+|)}.alt_calls.awk_positives_negatives.ML_set.tsv"
    log:
        "log/variant_calling/{reference}/prosolo/fdr_alt-presence/{sc}.{blk}.{ground_truth}.{candidates_type}.fdr_{fdr}_alt-presence.prosolo{min_sc_cov}.alt_calls.positives_negatives.ML_set.log"
    conda:
        "envs/gawk.yaml"
    threads: 2
    resources:
        mem_gb = 5
    shell:
        '''
        awk \
        'BEGIN {{ 
          FS = "\\t"; 
          OFS = "\\t"; 
          SUBSEP = ":";
          alts["0/1"] = 1; 
          alts["1/1"] = 1; 
          refs["0/0"] = 1; 
          tp = 0;
          fp = 0;
          fn = 0;
          tn = 0;
          p_not_called = 0;
          n_not_called = 0;
          no_ground_truth = 0;
        }} 
        {{
          if ( NR == FNR ) {{ 
            if ( ($1, $2) in calls ) {{ 
              if ( $3 == "ALT" ) {{ calls[$1,$2] = $3 }} 
            }} 
            else {{ 
              n_calls += 1; 
              calls[$1, $2] = $3; 
            }} 
          }} 
          else {{ 
            if ( ($1, $2) in calls ) {{
              n_gt += 1;
              if ( calls[$1, $2] == "ALT" ) {{ 
                if ( $3 in alts ) {{ tp += 1; }} 
                else {{ 
                  if ( $3 in refs ) {{ fp += 1; }} 
                }} 
              }} 
              else {{ 
                if ( calls[$1, $2] == "REF" ) {{ 
                  if ( $3 in alts ) {{ fn += 1; }} 
                  else {{ 
                    if ( $3 in refs ) {{ tn += 1; }} 
                  }} 
                }} 
              }} 
            }} 
            else {{ 
              if ( $3 in alts ) {{ p_not_called += 1; }} 
              if ( $3 in refs ) {{ n_not_called += 1; }} 
            }} 
          }} 
        }}
        END {{ 
          no_ground_truth = n_calls - n_gt;
          print "TP", "FP", "FN", "TN", "P_not_called", "N_not_called", "no_ground_truth";
          print tp, fp, fn, tn, p_not_called, n_not_called, no_ground_truth;
        }}' \
         {input.calls} <( zcat {input.ground_truth} ) \
         >{output} \
         2>&1 | tee {log}
        '''




## rules for calculating counts of all possible combinations of genotypes in prosolo calls and the ground truth


rule prosolo_genotype_matching_calculations:
    input:
        ground_truth = config["references"]["ground_truth"],
        calls =
        "variant_calling/{reference}/prosolo/{sc}.{blk}.{candidates_type}.prosolo{min_sc_cov}.tsv"
    output:
        "variant_calling/{reference}/prosolo/{sc}.{blk}.{candidates_type,(with_hom_ref_sites|alt_sites_only)}.prosolo{min_sc_cov,(\.min_sc_cov_\d+|)}.gt_matching.ML_set.tsv"
    log:
        "log/variant_calling/{reference}/prosolo/{sc}.{blk}.{candidates_type}.prosolo{min_sc_cov}.gt_matching.ML_set.log"
    resources:
        mem_gb = 10
    shell:
        "Rscript --vanilla " + include_prefix + "scripts/prosolo.genotype-calling.matches.R "
        " --gt {input.ground_truth} "
        " --calls {input.calls} "
        " --out {output} "
        " 2>&1 | tee {log} "

rule prosolo_genotype_matching_calculations_with_minGQ_30:
    input:
        ground_truth = config["references"]["ground_truth_minGQ_30"],
        calls =
        "variant_calling/{reference}/prosolo/{sc}.{blk}.{candidates_type}.prosolo{min_sc_cov}.tsv"
    output:
        "variant_calling/{reference}/prosolo/{sc}.{blk}.{candidates_type,(with_hom_ref_sites|alt_sites_only)}.prosolo{min_sc_cov,(\.min_sc_cov_\d+|)}.minGQ_30.gt_matching.ML_set.tsv"
    log:
        "log/variant_calling/{reference}/prosolo/{sc}.{blk}.{candidates_type}.prosolo{min_sc_cov}.minGQ_30.gt_matching.ML_set.log"
    resources:
        mem_gb = 20
    shell:
        "Rscript --vanilla " + include_prefix + "scripts/prosolo.genotype-calling.matches.R "
        " --gt {input.ground_truth} "
        " --calls {input.calls} "
        " --out {output} "
        " 2>&1 | tee {log} "


rule prosolo_genotype_matching_calculations_after_fdr:
    input:
        ground_truth = config["references"]["ground_truth"],
        calls =
        "variant_calling/{reference}/prosolo/fdr_{event_set}/{sc}.{blk}.{candidates_type}.fdr_{fdr}_{event_set}.prosolo{min_sc_cov}.tsv"
    output:
        "variant_calling/{reference}/prosolo/fdr_{event_set}/{sc}.{blk}.{candidates_type,(with_hom_ref_sites|alt_sites_only)}.fdr_{fdr}_{event_set}.prosolo{min_sc_cov,(\.min_sc_cov_\d+|)}.gt_matching.ML_set.tsv"
    log:
        "log/variant_calling/{reference}/prosolo/fdr_{event_set}/{sc}.{blk}.{candidates_type}.fdr_{fdr}_{event_set}.prosolo{min_sc_cov}.gt_matching.ML_set.log"
    resources:
        mem_gb = 20
    shell:
        "Rscript --vanilla " + include_prefix + "scripts/prosolo.genotype-calling.matches.R "
        " --gt {input.ground_truth} "
        " --calls {input.calls} "
        " --out {output} "
        " 2>&1 | tee {log} "


rule prosolo_genotype_matching_calculations_after_fdr_with_minGQ_30:
    input:
        ground_truth = config["references"]["ground_truth_minGQ_30"],
        calls =
        "variant_calling/{reference}/prosolo/fdr_{event_set}/{sc}.{blk}.{candidates_type}.fdr_{fdr}_{event_set}.prosolo{min_sc_cov}.tsv"
    output:
        "variant_calling/{reference}/prosolo/fdr_{event_set}/{sc}.{blk}.{candidates_type,(with_hom_ref_sites|alt_sites_only)}.fdr_{fdr}_{event_set}.prosolo{min_sc_cov,(\.min_sc_cov_\d+|)}.minGQ_30.gt_matching.ML_set.tsv"
    log:
        "log/variant_calling/{reference}/prosolo/fdr_{event_set}/{sc}.{blk}.{candidates_type}.fdr_{fdr}_{event_set}.prosolo{min_sc_cov}.minGQ_30.gt_matching.ML_set.log"
    resources:
        mem_gb = 20
    shell:
        "Rscript --vanilla " + include_prefix + "scripts/prosolo.genotype-calling.matches.R "
        " --gt {input.ground_truth} "
        " --calls {input.calls} "
        " --out {output} "
        " 2>&1 | tee {log} "


## rules for plotting the likelihood distributions of different event sets


rule prosolo_event_probs_ecdf:
    input:
        calls =
        "variant_calling/{reference}/prosolo/{sc}.{blk}.{candidates_type}.prosolo{min_sc_cov}.tsv"
    output:
        "variant_calling/{reference}/prosolo/{event_set}-rate/{sc}.{blk}.{candidates_type,(with_hom_ref_sites|alt_sites_only)}.prosolo{min_sc_cov,(\.min_sc_cov_\d+|)}.{event_set}-probs-ecdf.svg"
    log:
        "log/variant_calling/{reference}/prosolo/{event_set}-rate/{sc}.{blk}.{candidates_type}.prosolo{min_sc_cov}.{event_set}-probs-ecdf.log"
    resources:
        mem_gb = 20
    shell:
        "Rscript --vanilla " + include_prefix + "scripts/prosolo.ecdf-{wildcards.event_set}-probs.R "
        " --calls {input.calls} "
        " --out {output} "
        " 2>&1 | tee {log} "


rule prosolo_event_probs_histogram:
    input:
        calls =
        "variant_calling/{reference}/prosolo/{sc}.{blk}.{candidates_type}.prosolo{min_sc_cov}.tsv"
    output:
        "variant_calling/{reference}/prosolo/{event_set}-rate/{sc}.{blk}.{candidates_type,(with_hom_ref_sites|alt_sites_only)}.prosolo{min_sc_cov,(\.min_sc_cov_[0-9]|)}.{event_set}-probs-histogram.svg"
    log:
        "log/variant_calling/{reference}/prosolo/{event_set}-rate/{sc}.{blk}.{candidates_type}.prosolo{min_sc_cov}.{event_set}-probs-histogram.log"
    resources:
        mem_gb = 20
    shell:
        "Rscript --vanilla " + include_prefix + "scripts/prosolo.histogram-{wildcards.event_set}-probs.R "
        " --calls {input.calls} "
        " --out {output} "
        " 2>&1 | tee {log} "
